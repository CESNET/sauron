#!/usr/bin/perl -I/usr/local/sauron
#
# moduser - utility to modify user rights
#
# Copyright (c) Timo Kokkonen <tjko@iki.fi>  2000,2001.
# $Id$
#
require 5;
use Time::Local;
use Getopt::Long;
use Sauron::DB;
use Sauron::Util;
use Sauron::BackEnd;

my ($PG_DIR,$PG_NAME) = ($0 =~ /^(.*\/)(.*)$/);
$0 = $PG_NAME;

if (-r "/etc/sauron/config") {
  $config_file="/etc/sauron/config";
} elsif (-r "/usr/local/etc/sauron/config") {
  $config_file="/usr/local/etc/sauron/config"; 
} else {
  die("cannot find config file in /etc/sauron or /usr/local/etc/sauron");
}

do "$config_file" || die("cannot load config: $config_file");


$modgroup = ($PG_NAME eq 'modgroup' ? 1 : 0);
$fooname=($modgroup ? 'groupname' : 'username');


$user = (getpwuid($<))[0];
$mdate = time;

%addmodes=('server'=>1,'zone'=>2,'net'=>3,'host'=>4,'ipmask'=>5,
	   'level'=>6,'elimit'=>7,'defdept'=>8);

##############################################

$result = GetOptions("help|h","list!","add:s","delall!","del=s","passwd:s",
  	     "group=s","name=s","superuser=s","lock!","unlock!","edit!",
	      "email=s","comment=s","expiration=s");

$opt_user=$ARGV[0];


if ($opt_help || ($opt_user eq '' &&  $opt_list eq '')) {
  print "syntax: $0 <$fooname> [options]\n\n";
  print " Option descriptions: \n";

  print "   --name=\"user name\"                    full user name\n",
       "   --email=<address>                     set user's email address\n",
       "   --comment=<text>                      set user comments\n",
       "   --expiration=<DD-MM-YYYY> | NONE      set account expiration\n",
       "   --superuser=<yes|no>                  toggle superuser flag\n",
       "   --passwd                              set password (interactive)\n",
       "   --group=<groupname> | NONE            set user group\n",
       "   --passwd=<password>                   set password\n",
       "   --list                                list all $fooname\n",
       "   --lock                                lock account\n",
       "   --unlock                              unlock account\n\n"
         unless ($modgroup);

  print "   --list                                list all groups\n"
      if ($modgroup);

  print "                                         Priviliges\n",
        "   --add                                 interactive add\n",
        "   --add=\"server,<servername>,<mode>\"    add server (mode=R|RW|RWX)\n",
        "   --add=\"zone,<zonename>,<mode>\"        add zone (mode=R|RW|RWX)\n",
        "   --add=\"net,<net>,<mode>\"              add net (mode=RW|RWX)\n",
        "   --add=\"host,<reg exp>\"                add hostname mask\n",
        "   --add=\"ipmask,<ipmask>\"               add IP-mask\n",
        "   --add=\"level,<level>\"                 add priv.level\n",
        "   --add=\"elimit,<days>\"                 add expiration limit\n",
        "   --add=\"def_dept,<string>\"             add default dept for hosts\n\n",
        "   --del=<id>                            delete rule by id\n",
        "   --delall                              delete all rules\n",
        "\n";
  exit(0);
}

db_connect($DB_CONNECT);
db_debug(1);

if ($opt_list) {
  if ($modgroup) {
    print "Name                                     Comments\n";
    print "---------------------------------------- ----------------------\n";
    undef @q;
    db_query("SELECT id,name,comment FROM user_groups ORDER BY name;",\@q);
    for $i (0..$#q) {
      printf "%-40s %-20s\n", $q[$i][1],$q[$i][2];
    }
  }
  else {
    print 
     "Login      Group      Name                      Email                  Superusr\n",
     "---------- ---------- ------------------------- ---------------------- --------\n";
    undef @q;
    db_query("SELECT id,username,name,superuser,comment,email,gid FROM users ".
	     "ORDER BY username;",\@q);
    for $i (0..$#q) {
	$gid=$q[$i][6];
	if ($gid > 0) {
	    db_query("SELECT name FROM user_groups WHERE id=$gid",\@qq);
	    $group=substr($qq[0][0],0,10);
	} else {
	    $group='';
	}
      printf "%-10s %-10s %-25s %-25s %-5s\n", 
              $q[$i][1],$group,substr($q[$i][2],0,25),
	      substr($q[$i][5],0,25),($q[$i][3] eq 't' ? 'Yes' : '');
    }
  }

  exit 0;
}

fatal("Invalid $fooname '$opt_user'!") unless ($opt_user =~ /^\S+$/);


if ($modgroup) {
  undef @q;
  db_query("SELECT id,comment FROM user_groups " .
	   "WHERE name='$opt_user';",\@q);
  fatal("Cannot find usergroup '$opt_user' from user_groups table!") 
    if (@q < 1);

  $id=$q[0][0];
  $utype=1;

  print "\n Groupname: $opt_user (id=$id)\n",
        "   Comment: $q[0][1]\n\n";

} else {
  undef @q;
  db_query("SELECT id,name,superuser,comment,password FROM users " .
	   "WHERE username='$opt_user';",\@q);
  fatal("Cannot find user '$opt_user' from users table!") if (@q < 1);

  $id=$q[0][0];
  $pwd=$q[0][4];
  $utype=2;

  if ($opt_name) {
    $res=db_exec("UPDATE users SET name='$opt_name', " .
		 " muser='$user',mdate='$mdate' WHERE id=$id;");
    fatal("Cannot update user description!") if ($res < 0);
    print "User description successfully updated.\n";
  }
  if ($opt_email) {
    $res=db_exec("UPDATE users SET email='$opt_email', " .
		 " muser='$user',mdate='$mdate' WHERE id=$id;");
    fatal("Cannot update user email!") if ($res < 0);
    print "User email successfully updated.\n";
  }
  if ($opt_comment) {
    $res=db_exec("UPDATE users SET comment='$opt_comment', " .
		 " muser='$user',mdate='$mdate' WHERE id=$id;");
    fatal("Cannot update user comment!") if ($res < 0);
    print "User comment successfully updated.\n";
  }

  if ($opt_expiration) {
      unless ($opt_expiration =~ /^(\d{1,2})-(\d{1,2})-(\d\d\d\d)$/) {
	  if ($opt_expiration eq 'NONE') {
	      $edate=-1;
	  } else {
	      fatal("Invalid date supplied for option --expiration");
	  }
      } else {
	  $edate=timelocal(0,0,0,$1,$2-1,$3-1900);
      }

      $res=db_exec("UPDATE users SET expiration=$edate, " .
		   " muser='$user',mdate='$mdate' WHERE id=$id;");
      fatal("Cannot update user account expiration!") if ($res < 0);
      print "User account expiration successfully updated.\n";
  }

  if ($opt_group) {
      if ($opt_group eq 'NONE') {
	  $group_id=-1;
      } else {
	  undef @q;
	  db_query("SELECT id FROM user_groups WHERE name='$opt_group';",\@q);
	  fatal("Cannot find group: $opt_group") unless ($q[0][0] > 0);
	  $group_id=$q[0][0];
      }
      $res=db_exec("UPDATE users SET gid=$group_id, " .
		   " muser='$user',mdate='$mdate' WHERE id=$id;");
      fatal("Cannot update user description!") if ($res < 0);
      print "User description successfully updated.\n";
  }

  if ($opt_superuser) {
    if ($opt_superuser eq 'yes') { $superuser='true'; }
    elsif ($opt_superuser eq 'no') { $superuser='false'; }
    else { fatal("Invalid argument to option superuser!"); }
    $res=db_exec("UPDATE users SET superuser=$superuser, " .
		 "muser='$user',mdate='$mdate' WHERE id=$id;");
    fatal("Cannot update user superuser status!") if ($res < 0);
    print "User superuser status successfully updated.\n";
  }

  if (defined $opt_passwd) {
    fatal("Account currently locked!") if ($pwd =~ /^LOCKED/);

    unless ($opt_passwd) {
      print "Enter password: ";
      chomp ($opt_passwd = <STDIN>);
    }

    $salt=int(rand(900000)+100000);
    $pwd=pwd_crypt($opt_passwd,$salt);
    $res=db_exec("UPDATE users SET password='$pwd', " .
		 " muser='$user',mdate='$mdate' WHERE id=$id;");
    fatal("Cannot update user password!") if ($res < 0);
    print "User password successfully updated.\n";
  }

  if ($opt_lock) {
    if ($pwd =~ /^LOCKED/) {  fatal("account already locked!"); }
    $pwd="LOCKED:$pwd";
    $res=db_exec("UPDATE users SET password='$pwd', " .
		 " muser='$user',mdate='$mdate' WHERE id=$id;");
    fatal("Cannot update user password!") if ($res < 0);
    print "User account successfully locked.\n";
  }

  if ($opt_unlock) {
    unless ($pwd =~ /^LOCKED/) {  fatal("account not locked!"); }
    $pwd =~ s/^LOCKED://g;
    $res=db_exec("UPDATE users SET password='$pwd', " .
		 " muser='$user',mdate='$mdate' WHERE id=$id;");
    fatal("Cannot update user password!") if ($res < 0);
    print "User account successfully unlocked.\n";
  }


  undef @q;
  db_query("SELECT u.id,u.name,u.superuser,u.comment,u.password,u.gid, " .
	   " u.cdate,u.cuser,u.mdate,u.muser,u.expiration,u.email, ".
	   " u.last_from,u.last " .
	   "FROM users u " .
	   "WHERE u.username='$opt_user';",\@q);
  fatal("Cannot find user '$opt_user' from users table!") if (@q < 1);

  $status=($pwd=~/^LOCKED/?"LOCKED!":"valid");
    if ($pwd =~ /^(LOCKED|MD5|CRYPT|UNIX-MD5)/) {
      $status="valid ($1)";
    } else {
      $status="Invalid password" ;
    }

  $cdate_str=($q[0][6] > 0 ? localtime($q[0][6])." by $q[0][7]" : '<never>');
  $mdate_str=($q[0][8] > 0 ? localtime($q[0][8])." by $q[0][9]" : '<never>');
  $edate_str=($q[0][10] > 0 ? localtime($q[0][10])."" : '<never>');
  $gid=$q[0][5];
  $gidname='<none>';
  $longname=$q[0][1];
  $comment=$q[0][3];
  $email=$q[0][11];
  $last_from=($q[0][13] > 0 ? localtime($q[0][13])." from $q[0][12]" : '');
  if ($gid > 0) {
    undef @q;
    db_query("SELECT name FROM user_groups WHERE id=$gid;",\@q);
    $gidname=$q[0][0] if (@q > 0);
  }

  print "\n           Username: $opt_user (id=$id)\n",
        "           longname: $longname\n",
        "              email: $email\n",
        "               info: $comment\n",
        "          superuser: " ,($q[0][2] eq 't' ? 'Yes':'No'), "\n",
        "              group: $gidname (gid=$gid)\n",
	"      passwd status: $status\n",
	"         last login: $last_from\n",
	" account expiration: $edate_str\n",
	"    account created: $cdate_str\n",
	"      last modified: $mdate_str\n\n";
}



########################################

unless (defined $opt_add || defined $opt_del || defined $opt_delall) {
  print 
    "ID     Type     Ref.                      Mode\n",
    "------ -------- ------------------------- --------------------------------\n";

  print "[User priviliges]\n" if ($utype == 2);
  list_privs($id,$utype);
  print "\n";

  if ($utype == 2 && $gid > 0) {
    print "[Group ($gidname) priviliges]\n";
    list_privs($gid,1);
  }

  exit;

}


if (defined $opt_add) {
  unless ($opt_add) {
  add_i:
    print "Record type [1=server,2=zone,3=net,4=hostmask,5=IP-mask,6=priv.level,7=elimit,8=defdept]: ";
    chomp($type = <STDIN>);
    unless ($type >= 1 && $type <=8) { print "invalid type!\n"; goto add_i; }
    if ($type==1 || $type==2 || $type==3) {
      print "Enter server name: ";
      chomp($tmp = <STDIN>);
      undef @d;
      db_query("SELECT id,name FROM servers WHERE name='$tmp';",\@d);
      if (@d < 1) { print "cannot find server!\n"; goto add_i; }
      if ($type==1) {
	$mode=ask_mode();
	unless ($mode) { print "invalid mode!\n"; goto add_i; }
	$ref=$d[0][0];
      } else {
	$serverid=$d[0][0];
      }
    }
    if ($type==2){
      print "Enter zone name: ";
      chomp($tmp = <STDIN>);
      undef @d;
      db_query("SELECT id,name FROM zones " .
	       "WHERE server=$serverid AND name='$tmp';",\@d);
      if (@d < 1) { print "cannot find zone!\n"; goto add_i; }
      $mode=ask_mode();
      unless ($mode) { print "invalid mode!\n"; goto add_i; }
      $ref=$d[0][0];
    }
    elsif ($type==3) {
      print "Enter net (CIDR): ";
      chomp($tmp = <STDIN>);
      unless (is_cidr($tmp)) { print "Invalid CIDR!"; goto add_i; }
      undef @d;
      db_query("SELECT id,name FROM nets " .
	       "WHERE server=$serverid AND net='$tmp';",\@d);
      if (@d < 1) { print "cannot find net!\n"; goto add_i; }
      #$mode=ask_mode(1);
      $mode='unused';
      unless ($mode) { print "invalid mode!\n"; goto add_i; }
      $ref=$d[0][0];
    }
    elsif ($type==4) {
      print "Enter hostname mask (regexp): ";
      chomp($tmp = <STDIN>);
      $mode=$tmp;
      $ref=-1;
    }
    elsif ($type==5) {
      print "Enter IP mask (eg 192.162.1-2.*, 192.162.1-2.10-254): ";
      chomp($tmp = <STDIN>);
      unless (check_ipmask($tmp,'')==1) {
	  print "invalid IP-mask!\n"; goto add_i;
      }
      $mode=$tmp;
      $ref=-1;
    }
    elsif ($type==6) {
      print "Enter privilege level (0-999): ";
      chomp($tmp = <STDIN>);
      unless (($tmp =~ /^\d+$/) && ($tmp < 999)) {
	  print "invalid level\n"; goto add_i;
      }
      $mode=$tmp;
      $ref=-1;
    }
    elsif ($type==7) {
      print "Enter host expiration limit (0-n days): ";
      chomp($tmp = <STDIN>);
      unless (($tmp =~ /^\d+$/) && ($tmp >= 0)) {
	print "invalid expiration limit\n"; goto add_i;
      }
      $mode=$tmp;
      $ref=-1;
    }
    elsif ($type==8) {
      print "Enter default department (string): ";
      chomp($tmp = <STDIN>);
      $tmp =~ s/^\s+|\s+$//g;
      unless (length($tmp) >= 1) {
	print "invalid default department\n"; goto add_i;
      }
      $mode=$tmp;
      $ref=-1;
    }

    $mode=db_encode_str($mode);
    $res=db_exec("INSERT INTO user_rights (type,ref,rtype,rref,rule) " .
		 "VALUES($utype,$id,$type,$ref,$mode);");
    fatal("cannot insert record to user_rights table!") if ($res < 0);
    exit;
  }

  fatal("invalid parameter '$opt_add' for add option!")
    unless ($opt_add =~ /^(server|zone|net|host|ipmask|level|elimit|defdept),([^,\s]+)(,(R|RW|RWX))?$/);
  $type=$addmodes{$1};
  $tmp=$2;
  $mode=$4;
  if ($type eq 1) {
    undef @d;
    db_query("SELECT id FROM servers WHERE name='$tmp';",\@d);
    fatal("cannot find server '$tmp'") if (@d < 1);
    $ref=$d[0][0];
  }
  elsif ($type eq 2) {
    if ($tmp=~/^(\S+):(\S+)$/) {
      $tmp1=$1;
      $tmp2=$2;
      $serverid=get_server_id($tmp1);
      fatal("Cannot find server '$tmp1'") unless ($serverid > 0);
    } else {
      fatal("Server not specified.");
    }
    undef @d;
    db_query("SELECT id FROM zones WHERE server=$serverid AND name='$tmp2';",
	     \@d);
    fatal("cannot find zone '$tmp2'") if (@d < 1);
    $ref=$d[0][0];
  }
  elsif ($type eq 3) {
    if ($tmp=~/^(\S+):(\S+)$/) {
      $tmp1=$1;
      $tmp2=$2;
      $serverid=get_server_id($tmp1);
      fatal("Cannot find server '$tmp1'") unless ($serverid > 0);
    } else {
      fatal("Server not specified.");
    }
    undef @d;
    db_query("SELECT id FROM nets WHERE server=$serverid AND net='$tmp2' ;",
	     \@d);
    fatal("cannot find net '$tmp'") if (@d < 1);
    $ref=$d[0][0];
  }
  elsif ($type eq 4) {
    $mode=$tmp;
    $ref=-1;
  }
  elsif ($type eq 5) {
    fatal("invalid IP-mask '$tmp'!")  unless (check_ipmask($tmp,'')==1);
    $mode=$tmp;
    $ref=-1;
  }
  elsif ($type eq 6) {
    fatal("invalid level '$tmp'!")
	unless (($tmp =~ /^\d+$/) && ($tmp < 999));
    $mode=$tmp;
    $ref=-1;
  }
  elsif ($type eq 7) {
    fatal("invalid expiration limit '$tmp'") unless ($tmp >= 0);
    $mode=$tmp;
    $ref=-1;
  }
  elsif ($type eq 8) {
    $tmp =~ s/^\s+|\s+$//g;
    fatal("invalid default department '$tmp'") unless (length($tmp) > 0);
    $mode=$tmp;
    $ref=-1;
  }

  $mode=db_encode_str($mode);
  $res=db_exec("INSERT INTO user_rights (type,ref,rtype,rref,rule) " .
	       "VALUES($utype,$id,$type,$ref,$mode);");
  fatal("cannot insert record to user_rights table!") if ($res < 0);
  print "Record successfully inserted.\n";
}
elsif (defined $opt_del) {
  fatal("invalid parameter to del option!")
    unless ($opt_del =~ /^(\d+)$/);
  $tmp=$1;

  $res=db_exec("DELETE FROM user_rights " .
	       "WHERE type=$utype AND ref=$id AND id=$tmp;");
  print "res=$res\n";
  fatal("cannot delete record (id=$tmp) from user_rights!") if ($res <0);
  print "User right record successfully deleted.\n";
  exit;
}
elsif ($opt_delall) {
  db_begin();
  $res=db_exec("DELETE FROM user_rights WHERE type=$utype AND ref=$id;");
  fatal("cannot delete all users records!") if ($res <0);
  fatal("commit failed!") if (db_commit()<0);
}
elsif ($opt_edit) {
  fatal("option not yet implemented");
}


exit;


#####################

sub ask_mode($n) {
  my($n) = @_;
  my($mode,$t,$i);
  my(%modehash);

  if ($n==1) { %modehash=(1=>'RW',2=>'RWX'); }
  else { %modehash=(1=>'R',2=>'RW',3=>'RWX'); }
  print "Enter mode [";
  foreach $i (keys %modehash) { print "$i=$modehash{$i} "; }
  print "]: ";

  chomp($t = <STDIN>);
  $mode=$modehash{$t};

  return $mode;
}


sub list_privs($$) {
  my($id,$utype) = @_;
  my($i,@d);

  undef @d;
  db_query("SELECT a.rule,b.name,a.id FROM user_rights a, servers b " .
	   "WHERE a.rtype=1 AND a.rref=b.id AND a.ref=$id AND a.type=$utype;",
	   \@d);
  #print "Server records:\n";
  for $i (0..$#d) {
    $d[$i][0] =~ s/\s+$//;
    printf "%-6s %-8s %-25s %s\n",$d[$i][2],"server",$d[$i][1],$d[$i][0];
  }

  undef @d;
  db_query("SELECT a.rule,c.name||':'||b.name,a.id FROM user_rights a, zones b, servers c " .
	   "WHERE a.rtype=2 AND a.rref=b.id AND b.server=c.id AND  a.ref=$id AND a.type=$utype;",
	   \@d);
  #print "Zone   records:\n";
  for $i (0..$#d) { 
    $d[$i][0] =~ s/\s+$//;
    printf "%-6s %-8s %-25s %s\n",$d[$i][2],"zone",$d[$i][1],$d[$i][0];
  }

  undef @d;
  db_query("SELECT a.rule,b.net,a.id,c.name FROM user_rights a, nets b, servers c " .
	   "WHERE a.rtype=3 AND a.rref=b.id AND b.server=c.id AND a.ref=$id AND a.type=$utype;",
	   \@d);
  #print "Net    records:\n" . db_errormsg();
  for $i (0..$#d) { 
    $d[$i][0] =~ s/\s+$//;
    printf "%-6s %-8s %-25s %s\n",$d[$i][2],"net",$d[$i][3].':'.$d[$i][1],
      '(IP constraint)';
  }

  undef @d;
  db_query("SELECT a.rule,a.id  FROM user_rights a " .
	   "WHERE a.rtype=4 AND a.ref=$id AND a.type=$utype;",\@d);
  #print "hostnamemask    records:\n";
  for $i (0..$#d) { 
    $d[$i][0] =~ s/\s+$//;
    printf "%-6s %-8s %-25s %s\n",$d[$i][1],"hostname",$d[$i][0],
      "(hostname constraint)";
  }

  undef @d;
  db_query("SELECT a.rule,a.id  FROM user_rights a " .
	   "WHERE a.rtype=5 AND a.ref=$id AND a.type=$utype;",\@d);
  #print "IP-mask    records:\n";
  for $i (0..$#d) { 
    $d[$i][0] =~ s/\s+$//;
    printf "%-6s %-8s %-25s %s\n",$d[$i][1],"IP-mask",$d[$i][0],
      "(IP constraint)";
  }

  undef @d;
  db_query("SELECT a.rule,a.id  FROM user_rights a " .
	   "WHERE a.rtype=6 AND a.ref=$id AND a.type=$utype;",\@d);
  #print "priv.level    records:\n";
  for $i (0..$#d) { 
    $d[$i][0] =~ s/\s+$//;
    printf "%-6s %-8s %-25s %s\n",$d[$i][1],"Level",$d[$i][0],
      "(privilege level)";
  }

  undef @d;
  db_query("SELECT a.rule,a.id  FROM user_rights a " .
	   "WHERE a.rtype=7 AND a.ref=$id AND a.type=$utype;",\@d);
  for $i (0..$#d) {
    $d[$i][0] =~ s/\s+$//;
    printf "%-6s %-8s %-25s %s\n",$d[$i][1],"ELimit",$d[$i][0],
      "(expiration limit)";
  }

  undef @d;
  db_query("SELECT a.rule,a.id  FROM user_rights a " .
	   "WHERE a.rtype=8 AND a.ref=$id AND a.type=$utype;",\@d);
  for $i (0..$#d) {
    $d[$i][0] =~ s/\s+$//;
    printf "%-6s %-8s %-25s %s\n",$d[$i][1],"DefDept",$d[$i][0],
      "(default department string)";
  }

}
