#!/usr/bin/perl -I/usr/local/sauron
#
# export-networks  generates /etc/networks file (from given server)
#
# Copyright (c) Timo Kokkonen <tjko@iki.fi>  2001.
# $Id$
#
require 5;
use Getopt::Long;
use Time::Local;
use Sauron::DB;
use Sauron::Util;
use Sauron::BackEnd;

my ($PG_DIR,$PG_NAME) = ($0 =~ /^(.*\/)(.*)$/);
$0 = $PG_NAME;

if (-r "/etc/sauron/config") {
  $config_file="/etc/sauron/config";
} elsif (-r "/usr/local/etc/sauron/config") {
  $config_file="/usr/local/etc/sauron/config"; 
} else {
  die("cannot find config file in /etc/sauron or /usr/local/etc/sauron");
}

do "$config_file" || die("cannot load config: $config_file");

###################################################################

$user = (getpwuid($<))[0];
$host = `hostname`;
$host =~ s/\n//g;
$time_now = localtime;

$result = GetOptions("help|h","verbose|v","all|a","comments");

if ($opt_help || @ARGV < 1) {
  print "syntax: $0 [--help] [--verbose] [--comments] [--all] <servername>\n";
  exit(0);
}

$verbose=1 if (defined $opt_verbose);
$servername=$ARGV[0];
$no_comments = ($opt_comments ? 0 : 1);

db_connect($DB_CONNECT);

$serverid=get_server_id($servername);
fatal("cannot find server '$servername'") unless ($serverid > 0);


unless ($opt_all) {
  $rule1=' AND no_dhcp=false ';
}

undef @q;
db_query("SELECT net,netname,comment,name " .
	 "FROM nets " .
	 "WHERE server=$serverid $rule1 " .
	 "ORDER BY net",\@q);

$found=@q;
print STDERR "Found $found network(s)\n" if ($verbose);

print "#\n# /etc/networks  -- automagically generated (by Sauron $VER)\n",
      "#                   created by $user\@$host at $time_now\n",
      "#\n# network-name                           network-number\n#\n";


for $i (0..$#q) {
  if ($q[$i][0] =~ /^127/) {
    $loopback_found=1;
    last;
  }
}

unless ($loopback_found) {
  $names{'loopback'}++;
  printf "%-40s %-15s %s\n", 'loopback', '127', '';
  print "#\n";
}


for $i (0..$#q) {
  ($net=$q[$i][0]) =~ s/\/\d+\s*$//;
  #$net =~ s/\.0//g;
  ($name=$q[$i][1]) =~ s/\s+/_/g;

  if ($name) {
    $nname=substr($name,0,35);
    if ($names{$nname}) {
      print STDERR "network name collision: $name\n" if ($verbose);
      $names{$nname}++;
      $nname.="-$names{$nname}";
    } else {
      $names{$nname}++;
    }
  } else {
    $nname='#';
  }

  $comment = $q[$i][3] . ($q[$i][2] ? ", $q[$i][2]":"");
  printf "# %s\n", $comment unless ($no_comments);
  printf "%-40s %-15s\n", $nname, $net;
}


print "#\n# eof\n";

exit 0;

# eof

