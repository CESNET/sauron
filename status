#!/usr/bin/perl
#
# status -- utlity to query/modify system status
#
# Copyright (c) Timo Kokkonen <tjko@iki.fi>  2001.
# $Id$
#
require 5;
use Getopt::Long;
use Term::ReadKey;


my ($PG_DIR,$PG_NAME) = ($0 =~ /^(.*\/)(.*)$/);
$0 = $PG_NAME;

if (-r "/etc/sauron/config") {
  $config_file="/etc/sauron/config";
} elsif (-r "/usr/local/etc/sauron/config") {
  $config_file="/usr/local/etc/sauron/config"; 
} else {
  die("cannot find config file in /etc/sauron or /usr/local/etc/sauron");
}

do "$config_file" || die("cannot load config: $config_file");
do "$PG_DIR/util.pl";
do "$PG_DIR/db.pl";
do "$PG_DIR/back_end.pl";

sub fatal($) {
  my ($msg) = @_;
  print STDERR "$0: $msg\n";
  exit(1);
}

##############################################

$argcount=@ARGV;



$result = GetOptions("cgi-enable","cgi-disable=s","help|h","pending:s",
		     "quiet");

if ($opt_help || not $result) {
  print "syntax: $0 [options]\n\n",
    "options:\n",
    " --help                       display this help\n",
    " --pending                    display number of hosts pending\n",
    " --pending=<servername>       display pending hosts for a server\n\n",
    " --cgi-disable='message'      disable CGI interface\n",
    " --cgi-enable                 enable CGI interface\n",
    " --quiet                      no verbose output\n";
  exit(0);
}

$db_ok = db_connect2();


if ($argcount < 1 && (! $opt_quiet)) {
  print "Sauron v$VER status\n\n";
  printf "Database connection:   %s\n", ($db_ok?"OK":"ERROR");
}

exit unless ($db_ok);

if (defined $opt_pending) {
  unless ($opt_pending) {
    unless ($opt_quiet) {
      print "Pending host record modifications:\n\n",
	    "Server                         Hosts\n",
	    "-----------------------------  -----\n";
    }
    $servers=get_server_list();
    for $i (0..$#{$servers}) {
      $server=$$servers[$i][0];
      $serverid=$$servers[$i][1];

      undef @q;
      db_query("SELECT COUNT(h.id) FROM hosts h, zones z " .
	       "WHERE z.server=$serverid AND h.zone=z.id " .
	       " AND (h.mdate > z.serial_date OR h.cdate > z.serial_date);",
	       \@q);
      next if ($opt_quiet && $q[0][0] < 1);
      printf "%-30s %d\n",$server,$q[0][0];
    }
    exit;
  }

  $serverid=get_server_id($opt_pending);
  fatal("cannot find server '$opt_pending'") unless ($serverid > 0);
  print "Pending host modifications for server: $opt_pending (id=$serverid)\n";

  $zones=get_zone_list($serverid,'M','f');
  for $i (0..$#{$zones}) {
    $zoneid=$$zones[$i][1];
    undef @q;
    db_query("SELECT h.domain,h.cdate,h.mdate,h.cuser,h.muser " .
	     "FROM hosts h, zones z " .
	     "WHERE z.id=$zoneid AND h.zone=z.id " .
	     " AND (h.mdate > z.serial_date OR h.cdate > z.serial_date) " .
	     "ORDER BY h.domain;",\@q);
    $count=@q;
    next unless ($count > 0);
    print "Zone: $$zones[$i][0] ($count)\n";
    for $j (0..$#q) {
      if ($q[$j][1] > $q[$j][2]) { 
	$date=localtime($q[$j][1]); $user=$q[$j][3]; $mode='Create';
      } else {
	$date=localtime($q[$j][2]); $user=$q[$j][4]; $mode='Modify';
      }
      printf "%-30s %6s  %-20s  %s\n",$q[$j][0],$mode,$date,$user;
    }
  }

  exit;
}



if (defined $opt_cgi_enable) {
  db_exec("DELETE FROM settings WHERE key='cgi_disable';");
  undef @q;
  db_query("SELECT value FROM settings WHERE key='cgi_disable';",\@q);
  if (@q > 0) {
    print STDERR "Cannot enable CGI interface!\n";
    exit(1);
  }
  print "CGI interface successfully enabled\n";
  exit;
}

if ($opt_cgi_disable) {
  $msg=$opt_cgi_disable;
  if ($msg =~ /^\s*$/) {
    print "CGI disable requires message\n";
    exit;
  }
  $msg=db_encode_str($msg);
  undef @q;
  db_query("SELECT value FROM settings WHERE key='cgi_disable';",\@q);
  if (@q > 0) {
    $res=db_exec("UPDATE settings SET value='$msg' WHERE key='cgi_disable';");
  } else {
    $res=db_exec("INSERT INTO settings (key,value) " .
		 "VALUES('cgi_disable',$msg);");
  }
  print "CGI interface succesfully disabled.\n";
  exit;
}


undef @q;
db_query("SELECT value FROM settings WHERE key='cgi_disable';",\@q);

unless ($opt_quiet) {
  printf "CGI interface:         %s\n",
    ($q[0][0] ne '' ? "Disabled ($q[0][0])":"Enabled");

  print "\n";
  printf("%-8s %-22s %-15s %-6s %s\n",'USER','NAME','FROM','IDLE','LOGIN');
}


$timeout=$USER_TIMEOUT;
$timeout=3600 unless ($timeout > 0);
$t=time;


get_who_list(\@who,$timeout);
for $i(0..$#who) {
  printf("%-8s %-22s %-15s %-6s %s\n",
	 $who[$i][0],$who[$i][1],$who[$i][2],$who[$i][3],$who[$i][4]);
}



exit;

