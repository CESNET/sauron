#!/usr/bin/perl
#
# htmldoc-sql -- simple script to generate HTML tables describing SQL table
#                definitions. (bugs: expects cleanly formatted SQL as input)
#
# Copyright (c) Timo Kokkonen <tjko@iki.fi>  2001.
# $Id$
#
require 5;
use Getopt::Long;

my ($PG_DIR,$PG_NAME) = ($0 =~ /^(.*\/)(.*)$/);
$0 = $PG_NAME;

sub error($) {
  my ($msg)=@_;
  print STDERR "$0: $msg\n";
}


$result = GetOptions("help|h","verbose|v","title=s");
$verbose = ($opt_verbose ? 1 : 0);
$title = ($opt_title ? $opt_title : "SQL table descriptions");

if ($opt_help || @ARGV < 1) {
  print "syntax: $0 [--help] [--verbose] [--title] <filenames> ...\n\n";
  exit(0);
}



while ($filename=$ARGV[0]) {
  shift;
  unless (open(FILE,$filename)) {
    error("cannot open file: $filename");
    exit(1);
  }
  print STDERR "Processing file: $filename\n" if ($verbose);

  $state=0;
  while (<FILE>) {
    s/\n//g;
    next if /^\s*$/;

    if ($state==2) {
      if (/\s*(.*)\*\//) {
	push @ol, "$1</TD></TR>\n";
	$state=1;
      } else {
	push @ol, "$_<BR>";
	
      }
      if (/-->(\S+)\.(\S+)/) {
	print STDERR "LINK: $table.$field --> $1.$2\n" if ($verbose);
	$links{$1}=[] unless ($links{$1});
	push @{$links{$1}}, [$table,"$table.$field -> $1.$2"];
      }
      next;
    }

    if (/CREATE\s+TABLE\s+(\S+)\s+\((.*)$/) {
      #print "TABLE '$1' '$2'\n";
      push @tables, $1;
      $table=$1;
      print STDERR "TABLE $1\n" if ($verbose);
      $state=1;
      $_=$2;
      push @ol, 
	"<P><BR><BR><A name=\"$1\"><H3>Table: $1</H3></A>" .
	"$c_str<P><TABLE border=1>" .
	"<TR><TH>field</TH><TH>type</TH><TH>comments</TH></TR>\n";
      $c_str='';
    }

    if (/^\s*\)/) {
      $state=0;
      push @ol, "</TABLE>\n\n";
    }

    if ($state > 0) {
      if (/CONSTRAINT\s+(.*)$/) {
	push @ol, 
	  "<TR></TR><TR><TD>CONSTRAINT</TD><TD colspan=2>$1</TD></TR>\n";
      }
      elsif (/^\s*\/\*(.+)\*\/\s*$/) {
	push @ol, "<TR><TD></TD><TD></TD><TD>$1</TD></TR>\n";
      }
      elsif (/^\s*(\S+)\s+(\S.*?)(,?\s*(\/\*(.*)|))?$/) {
	#print STDERR "record: 1:'$1' 2:'$2'  4:'$4'\n";
	$field=$1;
	push @ol, "<TR><TD>$1</TD><TD>$2</TD>";
	$rest=$4;
	if ($rest eq '') {
	  push @ol, "<TD>&nbsp;</TD></TR>\n";
	}
	elsif ($rest=~/\/\*(.+)\*\//) {
	  push @ol, "<TD>$1</TD></TR>\n";
	} else {
	  $rest=~ s/\/\*//;
	  push @ol, "<TD>$rest<BR>";
	  $state=2;
	}
      }

    }
    else {
      if ($comment) {
	$c_str.=$_;
	if ($c_str =~ /^(.*)\*\*\//) {
	  $comment=0;
	  $c_str=$1;
	  $c_str =~ s/\s+/ /g;
	}
      } elsif (/^\s*\/\*\*\s*(.*)$/) {
	$comment=1;
	$c_str=$1;
	if ($c_str =~ /^(.*)\*\*\//) {
	  $c_str=$1;
	  $c_str =~ s/\s+/ /g;
	  $comment=0;
	}
      }
    }
  }
}


# print out the HTML...

print "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n";
print "<HTML>\n<HEAD><TITLE>$title</TITLE></HEAD>\n<BODY>\n\n";
print "<!-- Generated by htmldoc-sql -- Copyright (C) 2001 Timo Kokkonen -->\n";
print "<H1>$title</H1><P>\n";

print "<H2>Tables</H2>\n<UL>\n";
for $i (0..$#tables) {
  $t=$tables[$i];
  print_table($t,'') unless ($printed{$t});

}
print "</UL><BR>\n";



print "<HR><H2>Table descriptions</H2>\n";

for $i (0..$#ol) {
  print "$ol[$i]";
}

$timenow=localtime(time);

print "<P><HR>\nAutomagically generated by htmldoc-sql<BR>$timenow\n";
print "</BODY></HTML>\n";

exit(0);

##################


sub print_table($$) {
  my($t,$info) = @_;
  my($j,$l,$foobar);

  print "<LI>";

  if ($printed{$t} > 0) {
    print "$t";
    $foobar=1;
  } else {
    print "<A HREF=\"#$t\">$t</A>";
  }
  print " &nbsp;&nbsp;<FONT size=-1> ($info)</FONT>" if ($info ne '');

  $printed{$t}++;

  $l=$links{$t};
  if (@{$l} > 0) {
    print "<UL>";
    for $j (0..$#{$l}) {
      $t=$$l[$j][0];
      $info=$$l[$j][1];
      print_table($t,$info) unless ($foobar);
    }
    print "</UL>";
  }
  print "</LI>\n";

}
