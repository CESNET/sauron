#!/usr/bin/perl
#
# import-jyu - imports nonstandard records from .hosts files
#
# Copyright (c) Timo Kokkonen <tjko@iki.fi>  2000.
# $Id$
#
# fileformat (similar to BIND Master File format):
# {<domain>|@|<blank>} [<ignored (ttl)>] [<ignored (class)] <type> <rdata>
#
# records supported:
#
#     	type		data
#	DHCP		<DHCP option>	
#	ETHER		<MAC address>	
#	ROUTER		{<network> <netmask>|DHCP option}
#       PRINTER         <printtab stuff for printers>
#       GROUP		<groupname>
#       TYPE            <machine's model/type>
#       SERIAL          <machine's serial no.>
#       MUUTA[0-9]      <other information about machine>
#
require 5;
use Net::Netmask;
use Getopt::Std;

($PG_DIR,$PG_NAME) = ($0 =~ /^(.*\/)(.*)$/);
$0 = $PG_NAME;

if (-r "/etc/sauron/config") {
  $config_file="/etc/sauron/config";
} elsif (-r "/usr/local/etc/sauron/config") {
  $config_file="/usr/local/etc/sauron/config"; 
} else {
  die("cannot find config file in /etc/sauron or /usr/local/etc/sauron");
}

do "$config_file" || die("cannot load config: $config_file");
do "$PG_DIR/util.pl";
do "$PG_DIR/util_zone.pl";
do "$PG_DIR/db.pl";

##############################

getopts("hs");

if (@ARGV != 3 || $opt_h) {
    print "syntax: $0 [-h] <servername> <zone> <.hosts file>\n";
    exit(1);
}


$servername = $ARGV[0];
$zonename = $ARGV[1];
$hostsfile = $ARGV[2];
$user = (getpwuid($<))[0];
$origin = "$zonename.";
$cdate = time;


db_connect();
db_debug(1);

die("cannot open .hosts file ($hostsfile)") if (! -f $hostsfile);

if ($hostsfile =~ /(^.*\/)/) { 
    $dir=$1; 
} else { 
    $dir="./"; 
}

print "server name: $servername\n";
print "zone name: $zonename\norigin: $origin\n";
print "directory: $dir\n";

chdir($dir) || die("Cannot change to directory '$dir'!");

###########################################################

#get server record id
$sqlstr = "SELECT id FROM servers WHERE name='$servername';";
$res = db_exec($sqlstr);
die("Cannot find server record '$servername'!") if ($res < 1);
$serverid = db_getvalue(0,0);

#get zone record id
$sqlstr = "SELECT id,type,reverse " .
          "FROM zones WHERE server=$serverid AND name='$zonename';";
$res = db_exec($sqlstr);
die("Cannot find zone record '$zonename'!") if ($res < 1);
$zoneid = db_getvalue(0,0);
$zonetype = db_getvalue(0,1);
$zonerev = db_getvalue(0,2);

die("Zone has to be normal master zone!") 
  if ($zonetype ne 'M' || $zonerev ne 'f');


undef %zonedata;
process_zonefile("fh0000",$hostsfile,$zonename,\%zonedata,1);

$count = keys %zonedata;
print "\nFound $count hosts...\n";

if ($opt_s) {
  foreach $h (keys %zonedata) {
    $rec=$zonedata{$h};
    $a=$rec->{A};
    $al=$rec->{ALIAS};
    $ar=$rec->{AREC};
    next unless ($rec->{CNAME} || (@{$ar} > 0) || (@{$al} > 0)
		 || (@{$a} > 0));

    $c_count++ if ($rec->{CNAME});
    $c_count+=@{$al};
    $a_count+=@{$ar};
    $a_count+=@{$a};
  }

  $all=$a_count+$c_count;
  print "Hosts: $a_count\n";
  print "Aliases: $c_count\n";
  print "total: $all\n";
  exit;
}


db_begin();

$rec = $zonedata{$origin};
warn("No SOA record found in hosts file!") unless ($rec);

# update zone record
if ($rec) {
  print "Updating zone/server specific stuff...\n";

  foreach $rtmp (@{$rec->{DHCP}}) {
    next if ($rtmp =~ /^\s*$/);
    $res=db_exec("INSERT INTO dhcp_entries (type,ref,dhcp) " .
		 "VALUES(1,$serverid,'$rtmp');");
    die("cannot insert dhcp_entry '$rtmp' for server!") if ($res < 0);
  }

  delete $zonedata{$origin};
}

# find out-of-zone records
foreach $host (keys %zonedata) {
  $rec=$zonedata{$host};
  next unless ($host eq remove_origin($host,$origin));
  next if ($host =~ /\.in-addr\.arpa\.?$/);
  next unless (@{$rec->{A}} > 0);

  # skip ones that already are in database
  undef @q; 
  db_query("SELECT id FROM hosts WHERE zone=$zoneid AND domain='$host';",\@q);
  next if ($q[0][0] > 0);

  print "out-of-zone: $host\n";


  die("cannot insert record $host!")
    if (db_exec("INSERT INTO hosts (cdate,cuser,zone,type,domain) " .
		"VALUES($cdate,'$user',$zoneid,1,'$host'); ") < 0);
  $oid=db_lastoid();
  undef @q;
  db_query("SELECT id FROM hosts WHERE OID=$oid;",\@q);
  die("cannot get for inserted record!") if (@q < 1);
  $id=$q[0][0];
  for $i (0..$#{$rec->{A}}) {
    $ip=$rec->{A}[$i];
    die("cannot insert A record for host!")
      if (db_exec("INSERT INTO a_entries (host,ip,reverse,forward) " .
		  "VALUES($id,'$ip',true,true);") < 0);
  }

  #delete $zonedata{$host};
}



# update AREC aliases
foreach $host (keys %zonedata) {
  $rec=$zonedata{$host};
  next unless (@{$rec->{AREC}} > 0);
  print "ARECs for $host :\n";
  undef @q;
  $arec_h=remove_origin($host,$origin);
  db_query("SELECT id FROM hosts WHERE zone=$zoneid AND domain='$arec_h';",
	   \@q);
  $a_id=$q[0][0];
  die("cannot get id for host $host!") unless ($a_id > 0);

  for $i (0..$#{$rec->{AREC}}) {
    $arec=$rec->{AREC}[$i];
    print "\t$i $arec id=";
    undef @q;
    db_query(
       "SELECT id,type FROM hosts WHERE zone=$zoneid AND domain='$arec';",\@q);
    $id=$q[0][0];
    print "$id ";
    unless ($id > 0) {
      print "FAILED!\n";
      next;
    }
    die("cannot delete A records for host id=$id!") 
      if (db_exec("DELETE FROM a_entries WHERE host=$id;") < 0);
    die("cannot update host record id=$id!")
      if (db_exec("UPDATE hosts SET type=7 WHERE id=$id;") < 0);
    die("cannot add AREC entry")
      if (db_exec("INSERT INTO arec_entries (host,arec) VALUES($id,$a_id);")
	  < 0);
    print "OK\n";
  }
}


# find virtual routers...

foreach $host (keys %zonedata) {
  $rec=$zonedata{$host};
  if ($rec->{ROUTER} ne '') {
    @router = split (" ",$rec->{ROUTER});

    if (! $rhash{$router[0]}) {
      $sqlstr = "UPDATE hosts SET router='1' WHERE zone=$zoneid " .
	"AND domain='" . remove_origin($host,$origin) . "';";
      $res = db_exec($sqlstr);
      die("Cannot update host record for router interface $host") if ($res<0);
      print "FAILED: $sqlstr\n" if (db_status() ne 'UPDATE 1');

      $rhash{$router[0]}={ MASK=>$router[1], NAME=>$host, VLAN=>$router[2]};
      $rcount++;
    } else {
      $rec2=$rhash{$router[0]};
      print "Duplicate router $rec2->{NAME} $router[0] vs. $host $rec->{ROUTER} " .
	    "(ignoring latter)\n";
      #die("fix it...");
    }
  }
}

$rc=keys %rhash;
print "found $rcount virtual-routers/subnets...$rc\n";


foreach $net (keys %rhash) {
  $rec=$rhash{$net};
  $rec2=$zonedata{$rec->{NAME}};

  $nm = new Net::Netmask($net,$rec->{MASK});
  $n = $nm->desc();
  $range1 = $nm->nth(1);
  $range2 = $nm->nth(-2);
  $vlan=($rec->{VLAN} ? "'$rec->{VLAN}'" : 'NULL');

  #print "$n $rec->{NAME} $rec->{ETHER}\n" if ($rec->{ETHER} ne '');
  #print "$n $rec->{NAME} : $net : $rec->{MASK} : $rec->{VLAN} : $rec2->{INFO}\n" if ($rec->{VLAN});

  $sqlstr = "INSERT INTO nets (cdate,cuser,server,net,comment," .
            "subnet,no_dhcp,range_start,range_end,vlan) " .
    "VALUES($cdate,'$user',$serverid,'$n','$rec2->{INFO}'," .
    "true,false,'$range1','$range2',$vlan);";

  if (db_exec($sqlstr) < 0) {
    die("net record for '$n' already exists!") 
  } else {
    $res=db_exec("SELECT id FROM nets WHERE server=$serverid AND net='$n';");
    die("Cannot get net record id!") if ($res < 0);
    $lastid=db_getvalue(0,0);

    foreach $rtmp (@{$rec2->{DHCP}}) {
      next if ($rtmp =~ /^\s*$/);
      $res=db_exec("INSERT INTO dhcp_entries (type,ref,dhcp) " .
		   "VALUES(4,$lastid,'$rtmp');");
      die("cannot insert dhcp_entry '$rtmp' for net $net!") if ($res < 0);
    }
  }

  delete $zonedata{$rec->{NAME}};
}



# delegated zones
foreach $host (keys %zonedata) {
  $rec = $zonedata{$host};
  if (@{$rec->{NS}} > 0) {
    #print "ns: $host\n";
    delete $zonedata{$host};
  }
}

# plain MX records
foreach $host (keys %zonedata) {
  $rec = $zonedata{$host};
  if (@{$rec->{MX}} > 0 && @{$rec->{A}} < 1 && @{$rec->{DHCP}} < 1) {
    #print "plain mx: $host\n";
    delete $zonedata{$host};
  }
}



# groups
print "Creating groups...\n";

foreach $host (keys %zonedata) { # find groups
  $rec = $zonedata{$host};
  if ($rec->{GROUP} ne '') {
    $grouphash{$rec->{GROUP}}++;
  }
}
foreach $group (keys %grouphash) {
  print "group: $group\n";
  $host=add_origin($group,$origin);
  $rec=$zonedata{$host};
  if (! $rec) {
    $host="." . $host;
    $rec=$zonedata{$host};
  }
  if (! $rec) {
    warn("Cannot find group: $group ($host)!");
    $comment='empty group';
  } else {
    $comment=$rec->{INFO};
  }

  $sqlstr="INSERT INTO groups " .
          "(cdate,cuser,server,name,comment) " .
          "VALUES($cdate,'$user',$serverid,'$group','$comment');";
  if (db_exec($sqlstr) < 0) {
    die("group '$group' allready exists") 
  } else {
    $res=db_exec("SELECT id FROM groups WHERE " .
		 " server=$serverid AND name='$group';");
    die("Cannot get group record id!") if ($res < 0);
    $lastid=db_getvalue(0,0);

    foreach $rtmp (@{$rec->{DHCP}}) {
      next if ($rtmp =~ /^\s*$/);
      $res=db_exec("INSERT INTO dhcp_entries (type,ref,dhcp) " .
		   "VALUES(5,$lastid,'$rtmp');");
      die("cannot insert dhcp_entry '$rtmp' for group $group!") if ($res < 0);
    }
    foreach $rtmp (@{$rec->{PRINTER}}) {
      next if ($rtmp =~ /^\s*$/);
      $res=db_exec("INSERT INTO printer_entries (type,ref,printer) " .
		   "VALUES(1,$lastid,'$rtmp');");
      die("cannot insert printer_entry '$rtmp' for group $group!") 
	if ($res < 0);
    }
  }

  delete $zonedata{$host};
}
# get group id's
$sqlstr="SELECT id,name FROM groups WHERE server=$serverid;";
$res = db_exec($sqlstr);
undef %grouphash;
die("Cannot get group ID's!") if ($res < 0);
for ($j=0;$j<$res;$j++) {
  $gid=db_getvalue($j,0);
  $gname=db_getvalue($j,1);
  $grouphash{$gname}=$gid;
}
#for $g (keys %grouphash) { print "$g $grouphash{$g}\n"; }


# printer definitions
foreach $host (keys %zonedata) {
  $rec = $zonedata{$host};
  if (@{$rec->{A}} < 1 && @{$rec->{PRINTER}} > 0 &&
      @{$rec->{DHCP}} < 1) {

    $printerhash{$host}=$rec;
    $host2=remove_origin($host,$origin);
    $info="$rec->{INFO}";
    $group=$grouphash{$rec->{GROUP}};
    $group=-1 if (! $group);

    if ($host =~ /^\@\S+$/) {
      undef @q;
      db_query("SELECT id FROM printer_classes WHERE name='$host2';",\@q);
      if (@q > 0) {
	print "skipping printer class: $host2\n";
      }
      else {
	$ptype=3;
	print "printer class: $host2\n";
	$sqlstr="INSERT INTO printer_classes " .
	  "(cdate,cuser,name,comment) " .
	    "VALUES($cdate,'$user','$host2','imported entry');";
	if (db_exec($sqlstr) < 0) {
	  die("cannot insert printer_class '$host2'") ;
	  $lastid=-1;
	} else {
	  $res=db_exec("SELECT id FROM printer_classes WHERE name='$host2';");
	  die("Cannot get printer_class record id!") if ($res < 0);
	  $lastid=db_getvalue(0,0);	
	}
      }
    } else {
      $ptype=2;
      print "printer: $host $rec->{GROUP}\n";
      $sqlstr="INSERT INTO hosts " .
	"(cdate,cuser,zone,type,domain,hinfo_hw,hinfo_sw," .
	"info,comment,grp,prn) " .
	"VALUES($cdate,'$user',$zoneid,5,'$host2','REMOTE-PRINTER'," .
	"'POSTSCRIPT','$info','virtual printer entry'," .
	"$group,true );";
      if (db_exec($sqlstr) < 0) {
	die("cannot insert virtual printer '$host2'");
	$lastid=-1;
      } else {
	$res=db_exec("SELECT id FROM hosts WHERE zone=$zoneid AND " .
		     " domain='$host2';");
	die("Cannot get printer(host) record id!") if ($res < 0);
	$lastid=db_getvalue(0,0);	
      }
    }

    foreach $rtmp (@{$rec->{PRINTER}}) {
      next if ($rtmp =~ /^\s*$/);
      $res=db_exec("INSERT INTO printer_entries (type,ref,printer) " .
		   "VALUES($ptype,$lastid,'$rtmp');");
      die("cannot insert printer_entry '$rtmp' for printer $host2!") 
	if ($res < 0);
    }

    delete $zonedata{$host};
  }
}



# build domainname<-->id hash 
$res=db_exec("SELECT id,domain FROM hosts WHERE zone=$zoneid;");
die("Cannot get host list!") if ($res < 1);
for $j (0..$res-1) {
  $lastid=db_getvalue($j,0);
  $hostname=db_getvalue($j,1);
  $hostidhash{$hostname}=$lastid;
}

# hosts

$j=0;
$str='';
foreach $host (keys %zonedata) {
  $rec = $zonedata{$host};
  if (@{$rec->{A}} > 0) {
    $hostname = remove_origin($host,$origin);
    $lastid=$hostidhash{$hostname};
    if (! $lastid) {
      warn("cannot find id for host $hostname in hostidhash!") ;
      delete $zonedata{$host};
      next;
    }

    $ether = ($rec->{ETHER} eq '' ? "NULL" : "'$rec->{ETHER}'");
    $ether_alias = -1;
    if ($rec->{ETHER2} ne '') {
      $ether_alias=$hostidhash{$rec->{ETHER2}};
      unless ($ether_alias > 0) {
	warn("cannot find ETHER address for '$host' ETHER2 entry");
	$ether_alias=-1;
      }
    }

    foreach $rtmp (@{$rec->{DHCP}}) {
      next if ($rtmp =~ /^\s*$/);
      $res=db_exec("INSERT INTO dhcp_entries (type,ref,dhcp) " .
		   "VALUES(3,$lastid,'$rtmp');");
      die("cannot insert dhcp_entry '$rtmp' for $hostname ($id)!") 
	if ($res < 0);
    }

    if (@{$rec->{PRINTER}} < 1) {
      $prn='false';
    } else {
      $prn='true';
      foreach $rtmp (@{$rec->{PRINTER}}) {
	next if ($rtmp =~ /^\s*$/);
	$res=db_exec("INSERT INTO printer_entries (type,ref,printer) " .
		     "VALUES(2,$lastid,'$rtmp');");
	die("cannot insert printer_entry '$rtmp' for $hostname ($id)!") 
	  if ($res < 0);
      }
    }
    $group=$grouphash{$rec->{GROUP}};
    $group=-1 if (! $group);

    #print "host: $host $hostname HW=$ether\n";
    $serial='NULL';
    $serial=db_encode_str($rec->{SERIAL}) if ($rec->{SERIAL} ne '');
    $model='NULL';
    $model=db_encode_str($rec->{TYPE}) if ($rec->{TYPE} ne '');
    $muuta=db_encode_str(join(',',@{$rec->{MUUTA}}));
    $muuta='NULL' if ($muuta eq '');
    $info='NULL';
    $info=db_encode_str($rec->{INFO}) if ($rec->{INFO} ne '');

    $sqlstr = "UPDATE hosts SET ether=$ether, model=$model, serial=$serial, " .
              "misc=$muuta, info=$info, grp=$group, prn=$prn, " .
	      "ether_alias=$ether_alias " .
		"WHERE id=$lastid;";
#              "WHERE zone=$zoneid AND domain='$hostname';";
    #print "$sqlstr\n";
    $str.=$sqlstr . "\n";
    $j++;
    if ($j > 50) {
      die("Cannot update host $host") if (db_exec($str) < 0);
      $str='';
      $j=0;
      print STDERR "."; # . db_status() . "\n";
    }

    delete $zonedata{$host};
  }
}
if ($str ne '') {
      die("Cannot update host $host") if (db_exec($str) < 0);
      print STDERR "|";
}
print "\n";



# show unprocessed records...
foreach $host (keys %zonedata) {
  $rec = $zonedata{$host};
  #print "unprosessed: $host\n" if (@{$rec->{A}} < 1);

  delete $zonedata{$host};
}


# tag printers...
#undef @plist;
#db_query("SELECT h.id FROM hosts h,zones z,groups g " .
#	 "WHERE h.zone=z.id AND h.grp=g.id AND z.server=$serverid " .
#	 "AND h.prn=false AND g.printer NOTNULL;",\@plist);
#if (@plist > 0) {
#  print "Tagging printers...\n";
#
#  for $i (0 .. $#plist) {
#    die("cannot update host entry id=$plist[$i][0]")
#      if (db_exec("UPDATE hosts SET prn=true WHERE id=$plist[$i][0];") < 0);
#  }
#}



print "Commiting changes...\n";
die("error commiting the changes!") 
  if (db_commit() < 0);

print "Vacuuming dbase...\n";
#db_vacuum();
exit;

# eof
